{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 README: \
\
- There are two classes here to implement the chess AI. They are AlphaBetaAI and BasicAI. BasicAI uses iterative deepening Minimax to find the best move, and takes around 30 seconds to run each move at a depth of 4. AlphaBetaAI uses iterative deepening alpha beta pruning to find the best move, and takes around 20 seconds to run at a depth of 6. To change the depth of both of these searches, change the MAXDEPTH variable within the first 10 lines of the respective classes. \
\
- The current AI being used is AlphaBetaAI with a depth of 6. To change the AI to run, comment out line 76 in ChessClient and uncomment line 77, and vice versa to go back to the AlphaBetaAI.\
\
- To run, just run ChessClient.java in an IDE and play type commands into the GUI to make moves!\
\
- The print statements are there to show the current depth and move being considered, and shows how many nodes have been visited. These print statements are not necessary, but are good because it shows the user that the code is still running, and shows the status of the search. \
\
- One thing to note is that there are a few different starting boards commented out in ChessGame.java. Only have one starting board be uncommented, but play around by looking at the different starting boards to see how the AI reacts in different conditions. }